#!/bin/bash
# postinst script
#
# see: dh_installdeb(1)

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.

#DEBHELPER#

# function to check if a given path is a symlink
function isValidSymlink() {
    if [ -L "$1" ]; then
        return 0
    else
        return 1
    fi
}

# get python version, remove spaces, get Python3.7 or Python3.9, lowercase
PYTHONSTUB=`python3 -V 2>&1 | sed 's/ //g' | grep -oP '(\w+\.\d+)' | tr 'P' 'p'`

# the actual target working directory (this is a workaround so we can support multiple Python versions at build)
SOURCE_DIR=/opt/wlanpi-webui/lib/$PYTHONSTUB/site-packages/wlanpi_webui

# this is the parent directory which holds our linked working directory
LINK_DIR=/opt/wlanpi-webui/workingdirectory

# this is the path that we need to check if is already a link
TEST_PATH=/opt/wlanpi-webui/workingdirectory/wlanpi_webui

# if link doesn't exist, create it
if ! isValidSymlink $TEST_PATH; then
    ln -s $SOURCE_DIR $LINK_DIR
fi

CONF_CHANGED=1

# if default site is enabled, disable it.
DEFAULT_FILE=/etc/nginx/sites-enabled/default
if isValidSymlink $DEFAULT_FILE; then
    echo "Unlinking $DEFAULT_FILE"
    unlink $DEFAULT_FILE
fi

# if wlanpi_librespeed.conf is not a symlink, create symlink.
WLANPI_LIBRESPEED=/etc/nginx/sites-enabled/wlanpi_librespeed.conf
if ! isValidSymlink $WLANPI_LIBRESPEED; then
    echo "Linking wlanpi_librespeed.conf ..."
    ln -s /etc/wlanpi-webui/nginx/sites-enabled/wlanpi_librespeed.conf $WLANPI_LIBRESPEED
    CONF_CHANGED=0
fi

# if wlanpi_webui.conf is not a symlink, create symlink.
WLANPI_WEBUI=/etc/nginx/sites-enabled/wlanpi_webui.conf
if ! isValidSymlink $WLANPI_WEBUI; then
    echo "Linking wlanpi_webui.conf ..."
    ln -s /etc/wlanpi-webui/nginx/sites-enabled/wlanpi_webui.conf $WLANPI_WEBUI
    CONF_CHANGED=0
fi

# Transitional logic for nginx configuration which is now handled in wlanpi-core
# This code exists to handle legacy wlanpi-webui postinst scripts 
if [ ! -f /etc/nginx/nginx.conf ]; then
    LOCK_FILE="/var/lock/wlanpi-nginx-transition.lock"

    NGINX_CONFIG="user www-data;
worker_processes auto;
pid /run/nginx.pid;

events {
    worker_connections 512;
    use epoll;
    multi_accept on;
}

http {
    charset utf-8;
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    gzip on;
    server_tokens off;
    include /etc/nginx/sites-enabled/*.conf;
}"
    if mkdir "$LOCK_FILE" 2>/dev/null; then
        trap 'rmdir "$LOCK_FILE"; exit $?' INT TERM EXIT
        if [ ! -f /etc/nginx/nginx.conf ]; then
            echo "nginx configuration file is missing ..."
            if dpkg -l | grep -q "wlanpi-core"; then
                echo "triggering wlanpi-core reconfiguration ..."
                dpkg-reconfigure -fnoninteractive wlanpi-core || true
                if [ ! -f /etc/nginx/nginx.conf ]; then
                    echo "nginx.conf still missing after wlanpi-core reconfiguration, creating fallback ..."
                    mkdir -p /etc/nginx
                    echo "$NGINX_CONFIG" > /etc/nginx/nginx.conf
                    chown root:root /etc/nginx/nginx.conf
                    chmod 644 /etc/nginx/nginx.conf
                fi
            else
                echo "wlanpi-core not installed, creating temporary nginx configuration ..."
                mkdir -p /etc/nginx
                echo "$NGINX_CONFIG" > /etc/nginx/nginx.conf
                chown root:root /etc/nginx/nginx.conf
                chmod 644 /etc/nginx/nginx.conf
                echo "Please install wlanpi-core package which now handles nginx configuration ..."
            fi
        fi

        rmdir "$LOCK_FILE"
        trap - INT TERM EXIT
    else
        echo "Another process is handling nginx configuration, waiting up to 5 seconds ..."
        for i in $(seq 1 5); do
            if ! [ -d "$LOCK_FILE" ] || [ -f /etc/nginx/nginx.conf ]; then
                # Lock is released or config exists
                break
            fi
            sleep 1
        done
    fi
fi

if [ -f /etc/nginx/nginx.conf ]; then
    echo "nginx.conf configuration exists ..."
else
    echo "WARNING: Failed to create nginx configuration"
fi

# Handle nginx restart when needed
if which nginx >/dev/null 2>&1; then
    if [ $CONF_CHANGED -eq 0 ] || systemctl is-failed nginx.service >/dev/null 2>&1; then
        echo "Restarting nginx..."
        deb-systemd-invoke restart nginx.service || true

        # If restart failed, log a warning, but don't fail the installation
        if systemctl is-failed nginx.service >/dev/null 2>&1; then
            echo "WARNING: Nginx service failed to restart. Manual intervention may be required."
            echo "Run 'nginx -t' to check for configuration errors."
        fi
    fi
fi

# generate garbage.dat file
GARBAGE=/var/www/librespeed/data/garbage.dat
GARBAGE_PARENT_DIR=/var/www/librespeed/data
if [ ! -d $GARBAGE_PARENT_DIR ]; then
    mkdir -p $GARBAGE_PARENT_DIR
fi

if [ ! -f $GARBAGE ]; then
    echo "Creating 10 MB garbage.dat for librespeed ..."
    dd if=/dev/urandom of=$GARBAGE bs=10485760 count=1
fi

# fix up permissions
if [ -d /var/www/librespeed ]; then
    chown -R www-data:www-data /var/www/librespeed
fi

systemctl daemon-reload

echo "Restarting wlanpi-webui socket ..."
deb-systemd-invoke stop wlanpi-webui.socket
deb-systemd-invoke start wlanpi-webui.socket

echo "Restarting wlanpi-webui service ..."
deb-systemd-invoke restart wlanpi-webui.service

exit 0
